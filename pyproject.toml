[tool.poetry]
name = "pingcrm-flask"
version = "0.1.0"
description = ""
authors = ["Ralph R. <10516663+rr0001@users.noreply.github.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.10"
flask = "^2.3.2"
flask-inertia = {version = "0.4", extras = ["tests"]}
flask-sqlalchemy = "^3.0.5"
flask-migrate = "^4.0.4"
flask-login = "^0.6.2"
flask-marshmallow = "0.14.0"
marshmallow-sqlalchemy = "^0.29.0"
factory-boy = "3.2.1"
werkzeug = "^2.3.6"
coverage = "6.3.2"
poethepoet = "^0.21.1"
flask-vite = "^0.3.0"
python-decouple = "^3.8"
waitress = "^2.1.2"
flask-session = "^0.5.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poe.tasks]
init = ["init-npm", "migrate"]
init-npm = {shell="npm install", cwd="./static/vue"}
migrate = {shell="flask db upgrade"}
seed = {shell="flask seed"}
dev = {shell="npm run --prefix static/vue/ build -- --mode development --watch & flask db upgrade && waitress-serve --listen=127.0.0.1:5000 --call app:create_app", interpreter="pwsh", env={APP_CONFIG="dev.py"}}
serve = {shell="npm run --prefix static/vue/ build && flask db upgrade && waitress-serve --listen=127.0.0.1:5000 --call app:create_app", interpreter="pwsh", env={APP_CONFIG="prod.py"}}
clean = {shell="rm ./app/test*.db && rm ./app/sessions -re -fo"}
test-python = {shell="coverage run --source app --omit=app/dev.py -m unittest discover tests && coverage report -m --fail-under=90"}
build-dev = {shell="npm run --prefix static/vue/ build -- --mode development", interpreter="pwsh"}
build-prod = {shell="npm run --prefix static/vue/ build", interpreter="pwsh"}
